syntax = "proto3";
package raftkv;

message State {
    int32 term = 1;
    bool isLeader = 2; 
}

message KeyValue {
    string key = 1;
    string value = 2;
    int64 ClientId = 3;
    int64 RequestId = 4;
}

message GetKey {
    string key = 1;
    int64 ClientId = 2;
    int64 RequestId = 3;
}

message Reply {
    bool wrongLeader = 1;
    string error = 2;
    string value = 3;
}

message Empty {

}

message IntegerArg {
    int32 arg = 1;
}

enum RequestType {
    get = 0;
    put = 1;
    replace = 2;
}

message LogEntry {
    string key = 1;
    string value = 2;
    int64 ClientId = 3;
    int64 RequestId = 4;
    int32 index = 5;
    int32 term = 6;
    RequestType request = 7;
}

message AppendEntriesArgs {
    int32 term = 1;
    int32 leaderId = 2;
    int32 prevLogIndex = 3;
    repeated LogEntry entries = 4;
    int32 leaderCommit = 5;
}

message AppendEntriesReply {
    int32 term = 1;
    bool success = 2;
    int32 nextTryIndex = 3;
}

message RequestVoteArgs {
    int32 term = 1;
    int32 candidateId = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message RequestVoteReply {
    int32 term = 1;
    bool voteGranted = 2;
}

service KeyValueStore {
    rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply){};
    rpc GetState(Empty) returns (State){};
    rpc Get(GetKey) returns (Reply){};
    rpc Put(KeyValue) returns (Reply){};
    rpc Replace(KeyValue) returns (Reply){};
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply){};
}

service FrontEnd {
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply){};
    rpc Replace(KeyValue) returns (Reply){};
    rpc StartRaft(IntegerArg) returns (Reply){};
}
